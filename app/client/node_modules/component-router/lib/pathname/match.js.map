{"version":3,"sources":["../../src/pathname/match.js"],"names":[],"mappings":";;;;;;;;;;AAAO,IAAM,kCAAa,SAAb,UAAa,CAAC,MAAD,EAAS,YAAT;SAA0B,YAAmB;QAAlB,iEAAW,kBAAO;;AACrE,QAAI,eAAe,YAAf,CADiE;;AAGrE,WAAO,IAAP,CAAY,MAAZ,EAAoB,IAApB,CAAyB,aAAK;AAC5B,UAAM,QAAQ,SAAS,KAAT,CAAe,IAAI,MAAJ,CAAW,OAAO,CAAP,EAAU,KAAV,CAA1B,CAAR,CADsB;;AAG5B,UAAI,CAAC,KAAD,EAAQ;AACV,eAAO,KAAP,CADU;OAAZ;;AAIA,kCACK,OAAO,CAAP;AACH,gBAAQ,OAAO,IAAP,CAAY,OAAO,CAAP,EAAU,MAAV,CAAZ,CACL,MADK,CACE,UAAC,MAAD,EAAS,KAAT,EAAgB,CAAhB;8BACD,4BAAS,OAAQ,mBAAmB,MAAM,IAAI,CAAJ,CAAzB;SADhB,EACoD,EAFtD,CAAR;;QAFF,CAP4B;AAc5B,aAAO,IAAP,CAd4B;KAAL,CAAzB,CAHqE;;AAoBrE,WAAO,YAAP,CApBqE;GAAnB;CAA1B","file":"match.js","sourcesContent":["export const matchRoute = (routes, defaultRoute) => (pathname = '') => {\n  let matchedRoute = defaultRoute;\n\n  Object.keys(routes).some(r => {\n    const match = pathname.match(new RegExp(routes[r].regex));\n\n    if (!match) {\n      return false;\n    }\n\n    matchedRoute = {\n      ...routes[r],\n      params: Object.keys(routes[r].params)\n        .reduce((params, param, i) =>\n          ({...params, [param]: decodeURIComponent(match[i + 1])}), {})\n\n    };\n    return true;\n  });\n\n  return matchedRoute;\n};\n"]}