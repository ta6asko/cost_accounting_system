'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var routePartsRegex = exports.routePartsRegex = /(:?[^/]+)/ig;

var defaultRoute = exports.defaultRoute = { route: '/', regex: '^/$', params: {} };

var escapeRegExp = function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
};

var parseRoute = exports.parseRoute = function parseRoute() {
  var route = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];

  var parts = route.match(routePartsRegex);

  if (!parts) {
    return defaultRoute;
  }

  var parsedRoute = parts.reduce(function (_ref, part) {
    var regex = _ref.regex;
    var params = _ref.params;

    if (part.substr(0, 1) === ':') {
      return {
        regex: regex.concat('/([^/]+)'),
        params: _extends({}, params, _defineProperty({}, part.substr(1), null))
      };
    }

    return {
      regex: regex.concat(escapeRegExp('/' + part)),
      params: params
    };
  }, { regex: '', params: {} });

  return {
    route: route,
    regex: '^' + parsedRoute.regex + '$',
    params: parsedRoute.params
  };
};
//# sourceMappingURL=parse.js.map