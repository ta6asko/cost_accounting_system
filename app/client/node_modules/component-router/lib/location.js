'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.location = undefined;

var _shallowEqual = require('fbjs/lib/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _actions = require('./actions');

var _qs = require('qs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var maybePush = function maybePush(callback) {
  var lastQuery = void 0;
  var lastPathname = void 0;

  return function (_ref) {
    var pathname = _ref.pathname;
    var query = _ref.query;
    var hash = _ref.hash;

    if ((0, _shallowEqual2.default)(lastQuery, query) && lastPathname === pathname) {
      return;
    }
    var search = (0, _qs.stringify)(query, { strictNullHandling: true });

    lastQuery = query;
    lastPathname = pathname;
    callback({ pathname: pathname, search: search.length > 0 ? '?' + search : '', hash: hash });
  };
};

var maybeRestore = function maybeRestore(callback) {
  var state = {};

  return function (_ref2) {
    var pathname = _ref2.pathname;
    var search = _ref2.search;
    var hash = _ref2.hash;

    if ((0, _shallowEqual2.default)(state, { pathname: pathname, search: search, hash: hash })) {
      return;
    }
    state = { pathname: pathname, search: search, hash: hash };
    callback(state);
  };
};

var push = function push(history) {
  return maybePush(function (location) {
    return history.push(location);
  });
};

var location = exports.location = function location(createHistory, type) {
  return function (_ref3) {
    var store = _ref3.store;
    var _ref3$namespace = _ref3.namespace;
    var namespace = _ref3$namespace === undefined ? 'componentRouter' : _ref3$namespace;
    var _ref3$debounceTimeout = _ref3.debounceTimeout;
    var debounceTimeout = _ref3$debounceTimeout === undefined ? 50 : _ref3$debounceTimeout;

    var history = createHistory();
    var historyPush = push(history);

    var timer = void 0;

    var batchedHistoryPush = function batchedHistoryPush() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      clearTimeout(timer);
      timer = setTimeout(function () {
        return historyPush.apply(undefined, args);
      }, debounceTimeout);
    };

    var getState = function getState() {
      return store.getState()[namespace];
    };

    var historyUnsubscribe = history.listen(maybeRestore(function (_ref4) {
      var pathname = _ref4.pathname;
      var search = _ref4.search;
      var hash = _ref4.hash;
      return store.dispatch((0, _actions.restoreLocation)({ pathname: pathname, search: search, hash: hash }, type));
    }));

    var storeUnsubscribe = store.subscribe(function () {
      return batchedHistoryPush({
        pathname: getState().pathname,
        query: getState().cleanQuery,
        hash: getState().hash
      });
    });

    return function () {
      historyUnsubscribe();
      storeUnsubscribe();
    };
  };
};
//# sourceMappingURL=location.js.map