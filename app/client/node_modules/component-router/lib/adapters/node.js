'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locationNode = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _actions = require('../actions');

var locationNode = exports.locationNode = function locationNode(_ref) {
  var store = _ref.store;
  var routes = _ref.routes;
  return function (_ref2) {
    var url = _ref2.url;

    var _url$split = url.split('?');

    var _url$split2 = _slicedToArray(_url$split, 2);

    var pathname = _url$split2[0];
    var _url$split2$ = _url$split2[1];
    var search = _url$split2$ === undefined ? '' : _url$split2$;


    store.dispatch((0, _actions.restoreLocation)({
      pathname: pathname,
      search: search.length > 0 ? '?' + search : ''
    }));

    routes.forEach(function (route) {
      return store.dispatch((0, _actions.addRoute)(route));
    });
  };
};
//# sourceMappingURL=node.js.map