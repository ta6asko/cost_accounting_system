'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentRouter = exports.isActive = exports.href = exports.removeRoute = exports.addRoute = exports.restoreLocation = exports.removeParam = exports.addDefaultParam = exports.changeParams = exports.safeQuery = exports.cleanupQuery = exports.initialState = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _sortedObject = require('./sortedObject');

var _sortedObject2 = _interopRequireDefault(_sortedObject);

var _Constants = require('./Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _shallowEqual = require('fbjs/lib/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _qs = require('qs');

var _parse = require('./pathname/parse');

var _match = require('./pathname/match');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = exports.initialState = {
  pathname: '/',
  hash: '',
  query: {},
  cleanQuery: {},
  defaultParams: {},
  routes: {},
  currentRoute: _parse.defaultRoute,
  locationType: _Constants2.default.LOCATION_HISTORY
};

var cleanupQuery = exports.cleanupQuery = function cleanupQuery(_ref) {
  var query = _ref.query;
  var defaultParams = _ref.defaultParams;
  return (0, _sortedObject2.default)(Object.keys(query).reduce(function (clean, key) {
    if (defaultParams.hasOwnProperty(key) && query[key] === defaultParams[key]) {
      return clean;
    }
    return _extends({}, clean, _defineProperty({}, key, query[key]));
  }, {}));
};

var safeQuery = exports.safeQuery = function safeQuery() {
  var query = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var newQuery = query === null ? {} : query;

  Object.keys(newQuery).forEach(function (key) {
    newQuery[key] = '' + newQuery[key];
  });

  return newQuery;
};

var changeParams = exports.changeParams = function changeParams(state, params) {
  var defaultParams = state.defaultParams;
  var query = state.query;
  var pathname = state.pathname;

  var newQuery = (0, _sortedObject2.default)(_extends({}, defaultParams, query, safeQuery(params.query)));
  var newPathname = params.pathname || pathname;

  if ((0, _shallowEqual2.default)(newQuery, query) && newPathname === pathname) {
    return state;
  }

  var cleanQuery = cleanupQuery({ query: newQuery, defaultParams: defaultParams });
  var currentRoute = (0, _match.matchRoute)(state.routes, _parse.defaultRoute)(newPathname);

  return _extends({}, state, {
    query: newQuery,
    pathname: newPathname,
    cleanQuery: cleanQuery,
    currentRoute: currentRoute
  });
};

var addDefaultParam = exports.addDefaultParam = function addDefaultParam(state, _ref2) {
  var namespace = _ref2.namespace;
  var value = _ref2.value;
  var defaultParams = state.defaultParams;
  var query = state.query;

  var stringValue = '' + value;

  if (defaultParams.hasOwnProperty(namespace) && defaultParams[namespace] === stringValue) {
    return state;
  }

  var newDefaultParams = _extends({}, defaultParams, _defineProperty({}, namespace, stringValue));
  var newQuery = (0, _sortedObject2.default)(_extends({}, newDefaultParams, query));

  return _extends({}, state, {
    defaultParams: newDefaultParams,
    query: newQuery,
    cleanQuery: cleanupQuery({ query: newQuery, defaultParams: newDefaultParams })
  });
};

var removeParam = exports.removeParam = function removeParam(state, _ref3) {
  var namespace = _ref3.namespace;
  var defaultParams = state.defaultParams;
  var query = state.query;

  var newDefaultParams = _extends({}, defaultParams);
  var newQuery = (0, _sortedObject2.default)(_extends({}, defaultParams, query));

  if (newDefaultParams.hasOwnProperty(namespace)) {
    delete newDefaultParams[namespace];
  }
  if (newQuery.hasOwnProperty(namespace)) {
    delete newQuery[namespace];
  }

  return _extends({}, state, {
    defaultParams: newDefaultParams,
    query: newQuery,
    cleanQuery: cleanupQuery({ query: newQuery, defaultParams: newDefaultParams })
  });
};

var restoreLocation = exports.restoreLocation = function restoreLocation(state, _ref4) {
  var location = _ref4.location;
  var _ref4$locationType = _ref4.locationType;
  var locationType = _ref4$locationType === undefined ? _Constants2.default.LOCATION_HISTORY : _ref4$locationType;
  var defaultParams = state.defaultParams;
  var pathname = location.pathname;
  var search = location.search;
  var hash = location.hash;


  var newQuery = (0, _sortedObject2.default)(_extends({}, defaultParams, safeQuery((0, _qs.parse)(search.substr(1), { strictNullHandling: true }))));

  return _extends({}, state, {
    pathname: pathname,
    hash: hash,
    query: newQuery,
    cleanQuery: cleanupQuery({ query: newQuery, defaultParams: defaultParams }),
    currentRoute: (0, _match.matchRoute)(state.routes, _parse.defaultRoute)(pathname),
    locationType: locationType
  });
};

var addRoute = exports.addRoute = function addRoute(state, payload) {
  var routes = _extends({}, state.routes, _defineProperty({}, payload.route, (0, _parse.parseRoute)(payload.route)));
  var currentRoute = (0, _match.matchRoute)(routes, _parse.defaultRoute)(state.pathname);

  return _extends({}, state, { routes: routes, currentRoute: currentRoute });
};

var removeRoute = exports.removeRoute = function removeRoute(state, payload) {
  return _extends({}, state, {
    routes: Object.keys(state.routes).filter(function (key) {
      return key !== payload.route;
    }).reduce(function (result, key) {
      return _extends({}, result, _defineProperty({}, key, state.routes[key]));
    }, {})
  });
};

var href = exports.href = function href(state, payload) {
  var _changeParams = changeParams(state, payload);

  var pathname = _changeParams.pathname;
  var cleanQuery = _changeParams.cleanQuery;
  var hash = _changeParams.hash;

  var search = (0, _qs.stringify)(cleanQuery, { strictNullHandling: true });

  return [pathname, search.length > 0 ? '?' + search : '', hash].join('');
};

var isActive = exports.isActive = function isActive(state, _ref5) {
  var pathname = _ref5.pathname;
  var query = _ref5.query;

  var _changeParams2 = changeParams(state, { pathname: pathname, query: query });

  var newPathname = _changeParams2.pathname;
  var cleanQuery = _changeParams2.cleanQuery;


  return (0, _shallowEqual2.default)(cleanQuery, state.cleanQuery) && newPathname === state.pathname;
};

var reduce = function reduce(state, _ref6) {
  var type = _ref6.type;
  var payload = _ref6.payload;

  switch (type) {
    case _Constants2.default.NAVIGATE_TO:
      return changeParams(state, payload);

    case _Constants2.default.ADD_DEFAULT_PARAM:
      return addDefaultParam(state, payload);

    case _Constants2.default.REMOVE_PARAM:
      return removeParam(state, payload);

    case _Constants2.default.RESTORE_LOCATION:
      return restoreLocation(state, payload);

    case _Constants2.default.ADD_ROUTE:
      return addRoute(state, payload);

    case _Constants2.default.REMOVE_ROUTE:
      return removeRoute(state, payload);

    default:
      return state;
  }
};

var componentRouter = exports.componentRouter = function componentRouter() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];
  var _ref7 = arguments[1];
  var type = _ref7.type;
  var payload = _ref7.payload;

  var newState = reduce(state, { type: type, payload: payload });

  return (0, _shallowEqual2.default)(state, newState) ? state : newState;
};
//# sourceMappingURL=reducer.js.map