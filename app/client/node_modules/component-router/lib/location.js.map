{"version":3,"sources":["../src/location.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;AAGA,IAAM,YAAY,SAAZ,SAAY,WAAY;AAC5B,MAAI,kBAAJ,CAD4B;AAE5B,MAAI,qBAAJ,CAF4B;;AAI5B,SAAO,gBAA6B;QAA3B,yBAA2B;QAAjB,mBAAiB;QAAV,iBAAU;;AAClC,QAAI,4BAAa,SAAb,EAAwB,KAAxB,KAAkC,iBAAiB,QAAjB,EAA2B;AAC/D,aAD+D;KAAjE;AAGA,QAAM,SAAS,mBAAU,KAAV,EAAiB,EAAC,oBAAoB,IAApB,EAAlB,CAAT,CAJ4B;;AAMlC,gBAAY,KAAZ,CANkC;AAOlC,mBAAe,QAAf,CAPkC;AAQlC,aAAS,EAAC,kBAAD,EAAW,QAAQ,OAAO,MAAP,GAAgB,CAAhB,SAAwB,MAAxB,GAAmC,EAAnC,EAAuC,UAA1D,EAAT,EARkC;GAA7B,CAJqB;CAAZ;;AAiBlB,IAAM,eAAe,SAAf,YAAe,WAAY;AAC/B,MAAI,QAAQ,EAAR,CAD2B;;AAG/B,SAAO,iBAA8B;QAA5B,0BAA4B;QAAlB,sBAAkB;QAAV,kBAAU;;AACnC,QAAI,4BAAa,KAAb,EAAoB,EAAC,kBAAD,EAAW,cAAX,EAAmB,UAAnB,EAApB,CAAJ,EAAmD;AACjD,aADiD;KAAnD;AAGA,YAAQ,EAAC,kBAAD,EAAW,cAAX,EAAmB,UAAnB,EAAR,CAJmC;AAKnC,aAAS,KAAT,EALmC;GAA9B,CAHwB;CAAZ;;AAarB,IAAM,OAAO,SAAP,IAAO;SAAW,UAAU;WAAY,QAAQ,IAAR,CAAa,QAAb;GAAZ;CAArB;;AAGN,IAAM,8BAAW,SAAX,QAAW,CAAC,aAAD,EAAgB,IAAhB;SAAyB,iBAE3C;QADJ,oBACI;gCADG,UACH;QADG,4CAAY,oCACf;sCADkC,gBAClC;QADkC,wDAAkB,2BACpD;;AACJ,QAAM,UAAU,eAAV,CADF;AAEJ,QAAM,cAAc,KAAK,OAAL,CAAd,CAFF;;AAIJ,QAAI,cAAJ,CAJI;;AAMJ,QAAM,qBAAqB,SAArB,kBAAqB,GAAa;wCAAT;;OAAS;;AACtC,mBAAa,KAAb,EADsC;AAEtC,cAAQ,WAAW;eAAM,6BAAe,IAAf;OAAN,EAA4B,eAAvC,CAAR,CAFsC;KAAb,CANvB;;AAWJ,QAAM,WAAW,SAAX,QAAW;aAAM,MAAM,QAAN,GAAiB,SAAjB;KAAN,CAXb;;AAaJ,QAAM,qBAAqB,QAAQ,MAAR,CAAe,aAAa;UAAE;UAAU;UAAQ;aACzE,MAAM,QAAN,CAAe,8BAAgB,EAAC,kBAAD,EAAW,cAAX,EAAmB,UAAnB,EAAhB,EAA0C,IAA1C,CAAf;KADqD,CAA5B,CAArB,CAbF;;AAgBJ,QAAM,mBAAmB,MAAM,SAAN,CAAgB;aAAM,mBAAmB;AAChE,kBAAU,WAAW,QAAX;AACV,eAAO,WAAW,UAAX;AACP,cAAM,WAAW,IAAX;OAHuC;KAAN,CAAnC,CAhBF;;AAsBJ,WAAO,YAAM;AACX,2BADW;AAEX,yBAFW;KAAN,CAtBH;GAF2C;CAAzB","file":"location.js","sourcesContent":["import shallowEqual from 'fbjs/lib/shallowEqual';\nimport {restoreLocation} from './actions';\nimport {stringify} from 'qs';\n\n\nconst maybePush = callback => {\n  let lastQuery;\n  let lastPathname;\n\n  return ({pathname, query, hash}) => {\n    if (shallowEqual(lastQuery, query) && lastPathname === pathname) {\n      return;\n    }\n    const search = stringify(query, {strictNullHandling: true});\n\n    lastQuery = query;\n    lastPathname = pathname;\n    callback({pathname, search: search.length > 0 ? `?${search}` : '', hash});\n  };\n};\n\n\nconst maybeRestore = callback => {\n  let state = {};\n\n  return ({pathname, search, hash}) => {\n    if (shallowEqual(state, {pathname, search, hash})) {\n      return;\n    }\n    state = {pathname, search, hash};\n    callback(state);\n  };\n};\n\n\nconst push = history => maybePush(location => history.push(location));\n\n\nexport const location = (createHistory, type) => ({\n  store, namespace = 'componentRouter', debounceTimeout = 50\n}) => {\n  const history = createHistory();\n  const historyPush = push(history);\n\n  let timer;\n\n  const batchedHistoryPush = (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => historyPush(...args), debounceTimeout);\n  };\n\n  const getState = () => store.getState()[namespace];\n\n  const historyUnsubscribe = history.listen(maybeRestore(({pathname, search, hash}) =>\n    store.dispatch(restoreLocation({pathname, search, hash}, type))));\n\n  const storeUnsubscribe = store.subscribe(() => batchedHistoryPush({\n    pathname: getState().pathname,\n    query: getState().cleanQuery,\n    hash: getState().hash\n  }));\n\n  return () => {\n    historyUnsubscribe();\n    storeUnsubscribe();\n  };\n};\n"]}